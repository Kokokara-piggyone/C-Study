//输出字符串中的数字字符
#include<stdio.h>

int main()
{
	char ch;
	int sum=0;
	while((ch=getchar())!='\n')
	{
		if(ch>='0'&&ch<='9')
			sum=sum*10+ch-'0';
	}
	printf("%d\n",sum);
	return 0;
} 
// 将字符型转为整型输出
//第一种
#include<stdio.h>
#include<stdlib.h>
#include<string.h> 

int main()
{
	char s[15];
	int i,len,sum;
	gets(s);
	len=strlen(s);
	for(i=sum=0;i<len;i++) //第二句如果写i<15的话不足15则会出现内存里的乱码
		if(s[i]>='0'&&s[i]<='9')
			sum=sum*10+s[i]-'0';
	printf("%d\n",sum);
	return 0;
} 
//第二种
#include<stdio.h>

int main()
{
	char s[15];
	int i,sum;
	gets(s);
	for(i=sum=0;s[i];i++) //与s[i]!='\0'意思相同
		if(s[i]>='0'&&s[i]<='9')
			sum=sum*10+s[i]-'0';
	printf("%d\n",sum);
	return 0;
}

//数根
#include<stdio.h>

int sum1(int n)
{
	int sum,i;
	for(i=sum=0;n;n/=10)
		sum+=n%10;
	return sum;
}

int root(int n)
{
	int i,sum=n;
	while(sum/=10)
		sum=sum1(sum);
	return sum;
}
// root 递推的方法
int root(int n)
{
	if(n/10)
		return n;
	else
		root(root(n/10)+n%10);
} 

//将sum1和root合并为一个
int root(int n)
{
	int sum;
	while(n/10)
	{
		for(sum=0;n;n/=10)
			sum+=n%10;
		n=sum;	
	}	
	return n;
} 

int main()
{
	char s[1005];
	int i,sum;
	while(gets(s)&&s[0]!='0')
	{
		for(i=sum=0;s[i];i++)
			//忘记了。。。 
	}
	return 0;
} 

//折半查找 要先排序
#include<stdio.h>

int half_search(int a[],int key,int left,int right)
{
	int mid,ret=-1;
	while(left<=right)
	{
		mid=(left+right)/2;
		if(a[mid]==key)
			return mid;
		else if(a[mid]>key)
			right=mid-1;
		else
			left=mid+1;	
	}
	return ret; //?直接 return -1; 就不用定义ret了 
}

int main()
{
	int ret,a[10]={1,3,5,7,9,11,13,18,21,44};
	ret=half_search(a,13,0,9);
	printf("%d\n",ret);
	return 0; 
}

